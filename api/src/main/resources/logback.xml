<configuration>
    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
    </contextListener>

    <conversionRule conversionWord="effectiveLogger"
                    class="me.glicz.skanalyzer.util.logback.converter.EffectiveLoggerConverter"/>

    <property name="LOG_PATTERN" value="[%d{HH:mm:ss}] %highlight(%-5level) %effectiveLogger{36}%msg%n%xEx{full}"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <withJansi>true</withJansi>
        <target>System.out</target>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <filter class="me.glicz.skanalyzer.util.logback.filter.LevelFilter">
            <level>INFO</level>
            <matcher>LOWER_OR_EQUAL</matcher>
        </filter>
    </appender>

    <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
        <withJansi>true</withJansi>
        <target>System.err</target>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <filter class="me.glicz.skanalyzer.util.logback.filter.LevelFilter">
            <level>WARN</level>
            <matcher>HIGHER_OR_EQUAL</matcher>
        </filter>
    </appender>

    <appender name="MULTI_APPENDER" class="me.glicz.skanalyzer.util.logback.appender.MultiAppender">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="STDERR"/>
    </appender>

    <appender name="ASYNC_APPENDER" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="MULTI_APPENDER"/>
    </appender>

    <root level="info">
        <appender-ref ref="ASYNC_APPENDER"/>
    </root>

    <logger name="BukkitSchedulerMock" level="OFF"/>
</configuration>
